name: Java Layer Integration Test
on:
  workflow_call:
    inputs:
      caller-workflow-name:
        required: true
        type: string
  workflow_dispatch:

concurrency:
  group: main-build-java-${{ github.ref_name }}
  cancel-in-progress: true

permissions:
  id-token: write
  contents: read

jobs:
  integration-test:
    runs-on: ubuntu-20.04
    name: java-${{ matrix.sample-app }}-${{ matrix.instrumentation-type }}-${{ matrix.architecture }}-${{matrix.confmap}}
    strategy:
      fail-fast: false
      matrix:
        architecture: [ amd64, arm64 ]
        runtime: [java17, java11, java8.al2]
        sample-app: [ aws-sdk, okhttp ]
        instrumentation-type: [ wrapper ]
        confmap: [ "noop" ]
        include:
          - sample-app: aws-sdk
            instrumentation-type: agent
            architecture: amd64
          - sample-app: aws-sdk
            instrumentation-type: agent
            architecture: arm64
          - sample-app: aws-sdk
            instrumentation-type: agent-confmap
            architecture: amd64
            confmap: s3
          - sample-app: aws-sdk
            instrumentation-type: agent-confmap
            architecture: arm64
            confmap: s3
          - sample-app: aws-sdk
            instrumentation-type: agent-confmap
            architecture: amd64
            confmap: http
          - sample-app: aws-sdk
            instrumentation-type: agent-confmap
            architecture: arm64
            confmap: http
          - sample-app: aws-sdk
            instrumentation-type: agent-confmap
            architecture: amd64
            confmap: https
          - sample-app: aws-sdk
            instrumentation-type: agent-confmap
            architecture: arm64
            confmap: https

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: actions/setup-go@v5
        with:
          go-version: '~1.21.10'
          check-latest: true
      - uses: actions/setup-java@v4
        with:
          distribution: corretto
          java-version: '17'
      - name: Cache (Java)
        uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          role-to-assume: ${{ secrets.INTEG_TEST_LAMBDA_ROLE_ARN }}
          role-duration-seconds: 7200
          aws-region: us-east-1
      - name: Patch ADOT
        run: ./patch-upstream.sh
      - name: Build layers / functions
        run: GOARCH=${{ matrix.architecture }} ./build.sh ${{ matrix.architecture }}
        working-directory: java
      - name: Get Lambda Layer amd64 architecture value
        if: ${{ matrix.architecture == 'amd64' }}
        run: echo LAMBDA_FUNCTION_ARCH=x86_64 | tee --append $GITHUB_ENV
      - name: Get Lambda Layer arm64 architecture value
        if: ${{ matrix.architecture == 'arm64' }}
        run: echo LAMBDA_FUNCTION_ARCH=arm64 | tee --append $GITHUB_ENV
      - name: Get terraform directory
        run: |
          echo TERRAFORM_DIRECTORY=java/integration-tests/${{ matrix.sample-app }}/${{ matrix.instrumentation-type }} |
          tee --append $GITHUB_ENV
      - uses: hashicorp/setup-terraform@v2
      - name: Initialize terraform
        run: terraform init
        working-directory: ${{ env.TERRAFORM_DIRECTORY }}
      - name: Get terraform Lambda function name
        run: |
          echo TERRAFORM_LAMBDA_FUNCTION_NAME=lambda-java-${{ matrix.sample-app }}-${{ matrix.instrumentation-type }}-${{ matrix.confmap }}-${{ matrix.architecture }}-${{ github.run_id }} |
          tee --append $GITHUB_ENV
      - name: Apply terraform
        run: terraform apply -auto-approve
        working-directory: ${{ env.TERRAFORM_DIRECTORY }}
        env:
          TF_VAR_sdk_layer_name: opentelemetry-java-${{ matrix.sample-app }}-${{ matrix.instrumentation-type }}-${{ matrix.architecture }}-${{matrix.runtime}}-${{ github.run_id }}
          TF_VAR_function_name: ${{ env.TERRAFORM_LAMBDA_FUNCTION_NAME }}
          TF_VAR_architecture: ${{ env.LAMBDA_FUNCTION_ARCH }}
          TF_VAR_configuration_source: ${{ matrix.confmap }}
          TF_VAR_runtime: ${{ matrix.runtime }}
      - name: Extract endpoint
        id: extract-endpoint
        run: terraform output -raw api-gateway-url
        working-directory: ${{ env.TERRAFORM_DIRECTORY }}
      - name: Extract AMP endpoint
        id: extract-amp-endpoint
        if: ${{ matrix.sample-app == 'aws-sdk' && startsWith(matrix.instrumentation-type, 'agent') }}
        run: terraform output -raw amp_endpoint
        working-directory: ${{ env.TERRAFORM_DIRECTORY }}
      - name: Extract SDK layer arn
        id: extract-sdk-layer-arn
        run: terraform output -raw sdk_layer_arn
        working-directory: ${{ env.TERRAFORM_DIRECTORY }}
      - name: Output annotations
        run: |
          echo "::warning::Function: ${{ env.TERRAFORM_LAMBDA_FUNCTION_NAME }}"
          echo "::warning::SDK Layer ARN: ${{ steps.extract-sdk-layer-arn.outputs.stdout }}"
      - name: Send request to endpoint
        run: curl -sS ${{ steps.extract-endpoint.outputs.stdout }}
      - name: Checkout test framework
        uses: actions/checkout@v4
        with:
          repository: aws-observability/aws-otel-test-framework
          path: test-framework
      - name: validate trace sample
        run: |
          cp adot/utils/expected-templates/java-${{ matrix.sample-app }}-${{ matrix.instrumentation-type }}.json \
             test-framework/validator/src/main/resources/expected-data-template/lambdaExpectedTrace.mustache
          cd test-framework
          ./gradlew :validator:run --args="-c default-lambda-validation.yml --endpoint ${{ steps.extract-endpoint.outputs.stdout }} --region $AWS_REGION"
      - name: validate java agent metric sample
        if: ${{ matrix.sample-app == 'aws-sdk' && startsWith(matrix.instrumentation-type, 'agent') }}
        run: |
          cp adot/utils/expected-templates/java-${{ matrix.sample-app }}-${{ matrix.instrumentation-type }}-metric.json \
             test-framework/validator/src/main/resources/expected-data-template/ampExpectedMetric.mustache
          cd test-framework
          ./gradlew :validator:run --args="-c prometheus-static-metric-validation.yml --cortex-instance-endpoint ${{ steps.extract-amp-endpoint.outputs.stdout }} --region $AWS_REGION"
      - name: Destroy terraform
        if: always()
        run: terraform destroy -auto-approve
        working-directory: ${{ env.TERRAFORM_DIRECTORY }}
        env:
          TF_VAR_architecture: ${{ env.LAMBDA_FUNCTION_ARCH }}
