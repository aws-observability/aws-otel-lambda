name: Release public Lambda layer

on:
  workflow_dispatch:
    inputs:
      layer_kind:
        description: 'Layer kind such as: java-wrapper, java-agent, python38, nodejs, collector'
        required: true
      source_layer_arn:
        description: 'Clone layer from ARN: (find layer ARN from soaking workflow log)'
        required: true
      layer_name:
        description: 'Publish to layer name (ie: aws-otel-python38-ver-1-1-0)'
        required: true
      aws_region:
        description: 'Deploy to aws region'
        required: true
        default: "{\"aws_region\": [ \"us-east-1\", \"us-east-2\", \"us-west-1\", \"us-west-2\", \"ap-south-1\", \"ap-northeast-2\", \"ap-southeast-1\", \"ap-southeast-2\", \"ap-northeast-1\", \"ca-central-1\", \"eu-central-1\", \"eu-west-1\", \"eu-west-2\", \"eu-west-3\", \"eu-north-1\", \"sa-east-1\"]}"

jobs:
  publish-prod:
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(github.event.inputs.aws_region)}}
    steps:
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_ARN }}
          role-duration-seconds: 1200
          aws-region: us-east-1
      - name: download layer from source
        run: |
          URL=$(aws lambda get-layer-version-by-arn --arn ${{ github.event.inputs.source_layer_arn }} --query Content.Location --output text)
          curl $URL -o layer.zip
      # switch to prod
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_ARN_PROD }}
          role-duration-seconds: 1200
          aws-region: ${{ matrix.aws_region }}
          mask-aws-account-id: false
      - name: publish
        run: |
          BUCKET_NAME=publish-${{ github.event.inputs.layer_kind }}-${{ github.run_id }}-${{ matrix.aws_region }}
          aws s3 mb s3://$BUCKET_NAME
          aws s3 cp layer.zip s3://$BUCKET_NAME
          layerARN=$(aws lambda publish-layer-version --layer-name ${{ github.event.inputs.layer_name }} --content S3Bucket=$BUCKET_NAME,S3Key=layer.zip --query 'LayerVersionArn' --output text)
          echo $layerARN
          mkdir ${{ github.event.inputs.layer_name }}
          echo $layerARN > ${{ github.event.inputs.layer_name }}/${{ matrix.aws_region }}
          cat ${{ github.event.inputs.layer_name }}/${{ matrix.aws_region }}
      - name: public layer
        run: |
          layerVersion=$(aws lambda list-layer-versions --layer-name ${{ github.event.inputs.layer_name }} --query 'max_by(LayerVersions, &Version).Version')
          aws lambda add-layer-version-permission --layer-name ${{ github.event.inputs.layer_name }} --version-number $layerVersion --principal "*" --statement-id publish --action lambda:GetLayerVersion
      - name: upload layer arn artifact
        if: ${{ success() }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ github.event.inputs.layer_name }}
          path: ${{ github.event.inputs.layer_name }}/${{matrix.aws_region}}
      - name: clean s3
        if: always()
        run: |
          BUCKET_NAME=publish-${{ github.event.inputs.layer_kind }}-${{ github.run_id }}-${{ matrix.aws_region }}
          aws s3 rb --force s3://$BUCKET_NAME
  generate-note:
    runs-on: ubuntu-latest
    needs: publish-prod
    steps:
      - uses: hashicorp/setup-terraform@v1
      - name: download layerARNs
        uses: actions/download-artifact@v2
        with:
          name: ${{ github.event.inputs.layer_name }}
          path: ${{ github.event.inputs.layer_name }}
      - name: show layerARNs
        run: |
          for file in ${{ github.event.inputs.layer_name }}/*
          do
          echo $file
          cat $file
          done
      - name: generate layer-note
        run: |
          echo "| Region | Layer ARN |" >> layer-note
          echo "|  ----  | ----  |" >> layer-note
          cd ${{ github.event.inputs.layer_name }}
          for file in *
          do
          read arn < $file
          echo "| " $file " | " $arn " |" >> ../layer-note
          done
          cd ..
          cat layer-note
      - name: generate tf layer
        run: |
          echo "locals {" >> layer.tf
          if [ ${{ github.event.inputs.layer_kind }} != 'collector' ]
          then
            echo "  sdk_layer_arns = {" >> layer.tf
          else
            echo "  collector_layer_arns = {" >> layer.tf
          fi
          cd ${{ github.event.inputs.layer_name }}
          for file in *
          do
          read arn < $file
          echo "    \""$file"\" = \""$arn"\"" >> ../layer.tf
          done
          cd ..
          echo "  }" >> layer.tf
          echo "}" >> layer.tf
          terraform fmt layer.tf
          cat layer.tf
      - name: upload layer tf file
        uses: actions/upload-artifact@v2
        with:
          name: layer.tf
          path: layer.tf
  get-smoke-test-configuration:
    runs-on: ubuntu-latest
    needs: generate-note
    name: Set ${{ github.event.inputs.layer_kind }} Smoke Test Configuration Values
    outputs:
      sample_app_name: ${{ steps.set-smoke-test-outputs.outputs.sample_app_name }}
      language: ${{ steps.set-smoke-test-outputs.outputs.language }}
      build_directory: ${{ steps.set-smoke-test-outputs.outputs.build_directory }}
      build_command: ${{ steps.set-smoke-test-outputs.outputs.build_command }}
      terraform_directory: ${{ steps.set-smoke-test-outputs.outputs.terraform_directory }}
      expected_trace_template: ${{ steps.set-smoke-test-outputs.outputs.expected_trace_template }}
      expected_metric_template: ${{ steps.set-smoke-test-outputs.outputs.expected_metric_template }}
      amp_regions: ${{ steps.set-smoke-test-outputs.outputs.amp_regions }}
    steps:
      - name: Configure Java Agent Values
        if: ${{ github.event.inputs.layer_kind == 'java-agent' }}
        run: |-
          echo "SAMPLE_APP_NAME=java-awssdk-agent" >> $GITHUB_ENV;
          echo "LANGUAGE=java" >> $GITHUB_ENV;
          echo "BUILD_DIRECTORY=java" >> $GITHUB_ENV;
          echo "BUILD_COMMAND=./build.sh" >> $GITHUB_ENV;
          echo "TERRAFORM_DIRECTORY=sample-apps/java-agent-aws-sdk-terraform" >> $GITHUB_ENV;
          echo "EXPECTED_TRACE_TEMPLATE=adot/utils/expected-templates/java-awssdk-agent.json" >> $GITHUB_ENV;
          echo "EXPECTED_METRIC_TEMPLATE=adot/utils/expected-templates/java-awssdk-agent-metric.json" >> $GITHUB_ENV;
          echo "AMP_REGIONS=us-west-2,us-east-1,us-east-2,eu-central-1,eu-west-1" >> $GITHUB_ENV;
      - name: Configure Java Wrapper Values
        if: ${{ github.event.inputs.layer_kind == 'java-wrapper' }}
        run: |-
          echo "SAMPLE_APP_NAME=java-awssdk-wrapper" >> $GITHUB_ENV;
          echo "LANGUAGE=java" >> $GITHUB_ENV;
          echo "BUILD_DIRECTORY=java" >> $GITHUB_ENV;
          echo "BUILD_COMMAND=./build.sh" >> $GITHUB_ENV;
          echo "TERRAFORM_DIRECTORY=sample-apps/java-wrapper-aws-sdk-terraform" >> $GITHUB_ENV;
          echo "EXPECTED_TRACE_TEMPLATE=adot/utils/expected-templates/java-awssdk-wrapper.json" >> $GITHUB_ENV;
      - name: Configure NodeJS Values
        if: ${{ github.event.inputs.layer_kind == 'nodejs' }}
        run: |-
          echo "SAMPLE_APP_NAME=nodejs-awssdk" >> $GITHUB_ENV;
          echo "LANGUAGE=nodejs" >> $GITHUB_ENV;
          echo "BUILD_DIRECTORY=nodejs" >> $GITHUB_ENV;
          echo "BUILD_COMMAND=./build_upstream.sh" >> $GITHUB_ENV;
          echo "TERRAFORM_DIRECTORY=sample-apps/nodejs-aws-sdk-terraform" >> $GITHUB_ENV;
          echo "EXPECTED_TRACE_TEMPLATE=adot/utils/expected-templates/nodejs-awssdk.json" >> $GITHUB_ENV;
      - name: Configure Python Values
        if: ${{ github.event.inputs.layer_kind == 'python38' }}
        run: |-
          echo "SAMPLE_APP_NAME=python38" >> $GITHUB_ENV;
          echo "LANGUAGE=python" >> $GITHUB_ENV;
          echo "BUILD_DIRECTORY=opentelemetry-lambda/python/sample-apps" >> $GITHUB_ENV;
          echo "BUILD_COMMAND=./build.sh" >> $GITHUB_ENV;
          echo "TERRAFORM_DIRECTORY=sample-apps/python-aws-sdk-aiohttp-terraform" >> $GITHUB_ENV;
          echo "EXPECTED_TRACE_TEMPLATE=adot/utils/expected-templates/python.json" >> $GITHUB_ENV;
        # FIXME: (enowell) You can only Smoke Test 1 Sample App with this design. We will want to test
        # multiple in the future (i.e. Go/.NET Sample Apps with the same Collector Layer).
        # TODO: Add and Test .NET Lambda app in the same collector-only (Same used in Go) Lambda Layer in smoke test
      - name: Configure Collector Values
        if: ${{ github.event.inputs.layer_kind == 'collector' }}
        run: |-
          echo "SAMPLE_APP_NAME=dotnet-awssdk-wrapper" >> $GITHUB_ENV;
          echo "LANGUAGE=go" >> $GITHUB_ENV;
          echo "BUILD_DIRECTORY=go" >> $GITHUB_ENV;
          echo "BUILD_COMMAND=./build.sh" >> $GITHUB_ENV;
          echo "TERRAFORM_DIRECTORY=sample-apps/go-wrapper-aws-sdk-terraform" >> $GITHUB_ENV;
          echo "EXPECTED_TRACE_TEMPLATE=adot/utils/expected-templates/go-awssdk-wrapper.json" >> $GITHUB_ENV;
      - name: Set Configuration Outputs
        id: set-smoke-test-outputs
        run: |-
          echo "::set-output name=sample_app_name::${{ env.SAMPLE_APP_NAME }}";
          echo "::set-output name=language::${{ env.LANGUAGE }}";
          echo "::set-output name=build_directory::${{ env.BUILD_DIRECTORY }}";
          echo "::set-output name=build_command::${{ env.BUILD_COMMAND }}";
          echo "::set-output name=terraform_directory::${{ env.TERRAFORM_DIRECTORY }}";
          echo "::set-output name=expected_trace_template::${{ env.EXPECTED_TRACE_TEMPLATE }}";
          echo "::set-output name=expected_metric_template::${{ env.EXPECTED_METRIC_TEMPLATE }}";
          echo "::set-output name=amp_regions::${{ env.AMP_REGIONS }}";
  smoke-test:
    name: Smoke Test - ${{ matrix.aws_region }} - ${{ github.event.inputs.layer_name }}
    needs: get-smoke-test-configuration
    runs-on: ubuntu-latest
    strategy:
      matrix:
        aws_region: ${{fromJson(github.event.inputs.aws_region).aws_region}}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: actions/setup-java@v2
        if: ${{ needs.get-smoke-test-configuration.outputs.language == 'java' }}
        with:
          distribution: adopt
          java-version: '11'
      - name: Cache (Java)
        uses: actions/cache@v2
        if: ${{ needs.get-smoke-test-configuration.outputs.language == 'java' }}
        with:
          path: |
            ~/go/pkg/mod
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - uses: actions/setup-node@v2
        if: ${{ needs.get-smoke-test-configuration.outputs.language == 'nodejs' }}
        with:
          node-version: '14'
      - name: Cache (NodeJS)
        uses: actions/cache@v2
        if: ${{ needs.get-smoke-test-configuration.outputs.language == 'nodejs' }}
        with:
          path: |
            ~/go/pkg/mod
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package.json') }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - uses: actions/setup-python@v2
        if: ${{ needs.get-smoke-test-configuration.outputs.language == 'python' }}
        with:
          python-version: '3.x'
      - name: Cache (Python)
        uses: actions/cache@v2
        if: ${{ needs.get-smoke-test-configuration.outputs.language == 'python' }}
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - uses: actions/setup-go@v2
        if: ${{ needs.get-smoke-test-configuration.outputs.language == 'go' }}
        with:
          go-version: '^1.16'
      - name: download layer tf file
        uses: actions/download-artifact@v2
        with:
          name: layer.tf
      - name: overwrite layer.tf
        run: |
          cat ${{ needs.get-smoke-test-configuration.outputs.terraform_directory }}/layer.tf
          mv -f layer.tf ${{ needs.get-smoke-test-configuration.outputs.terraform_directory }}/layer.tf
          cat ${{ needs.get-smoke-test-configuration.outputs.terraform_directory }}/layer.tf
      - name: Build functions
        run: ${{ needs.get-smoke-test-configuration.outputs.build_command }}
        working-directory: ${{ needs.get-smoke-test-configuration.outputs.build_directory }}
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_ARN }}
          role-duration-seconds: 1200
          aws-region: ${{ matrix.aws_region }}
      - uses: hashicorp/setup-terraform@v1
      - name: Initialize terraform
        run: terraform init
        working-directory: ${{ needs.get-smoke-test-configuration.outputs.terraform_directory }}
      - name: Apply terraform
        run: terraform apply -auto-approve
        working-directory: ${{ needs.get-smoke-test-configuration.outputs.terraform_directory }}
        env:
          TF_VAR_function_name: hello-lambda-${{ needs.get-smoke-test-configuration.outputs.sample_app_name }}-${{ github.run_id }}-${{ matrix.aws_region }}
      - name: Extract endpoint
        id: extract-endpoint
        run: terraform output -raw api-gateway-url
        working-directory: ${{ needs.get-smoke-test-configuration.outputs.terraform_directory }}
      - name: Extract AMP endpoint
        if: ${{ needs.get-smoke-test-configuration.outputs.sample_app_name == 'java-awssdk-agent' && contains(needs.get-smoke-test-configuration.outputs.amp_regions, matrix.aws_region) }}
        id: extract-amp-endpoint
        run: terraform output -raw amp_endpoint
        working-directory: ${{ needs.get-smoke-test-configuration.outputs.terraform_directory }}
      - name: Send request to endpoint
        run: curl -sS ${{ steps.extract-endpoint.outputs.stdout }}
      - name: Checkout test framework
        uses: actions/checkout@v2
        with:
          repository: aws-observability/aws-otel-test-framework
          path: test-framework
      - name: validate trace sample
        run: |
          cp ${{ needs.get-smoke-test-configuration.outputs.expected_trace_template }} test-framework/validator/src/main/resources/expected-data-template/lambdaExpectedTrace.mustache
          cd test-framework
          ./gradlew :validator:run --args="-c default-lambda-validation.yml --endpoint ${{ steps.extract-endpoint.outputs.stdout }} --region $AWS_REGION"
      - name: validate java agent metric sample
        if: ${{ needs.get-smoke-test-configuration.outputs.sample_app_name == 'java-awssdk-agent' && contains(needs.get-smoke-test-configuration.outputs.amp_regions, matrix.aws_region) }}
        run: |
          cp ${{ needs.get-smoke-test-configuration.outputs.expected_metric_template }} test-framework/validator/src/main/resources/expected-data-template/ampExpectedMetric.mustache
          cd test-framework
          ./gradlew :validator:run --args="-c prometheus-static-metric-validation.yml --cortex-instance-endpoint ${{ steps.extract-amp-endpoint.outputs.stdout }} --region $AWS_REGION"
      - name: Destroy terraform
        if: always()
        run: terraform destroy -auto-approve
        working-directory: ${{ needs.get-smoke-test-configuration.outputs.terraform_directory }}
