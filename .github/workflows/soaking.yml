name: Soak tests

on:
  schedule:
    - cron: '0 14 * * 1,3,5' # Mon, Wed, Fri morning PST
  workflow_dispatch:
    inputs:
      soak_config:
        description: 'set memory/cpu threshold, soak time, emitter interval'
        retuired: false
        default: '-t 1800'

jobs:
  soaking-test:
    runs-on: ubuntu-20.04
    name: Soak Test - (${{ matrix.language }}, ${{ matrix.sample-app }}, ${{ matrix.instrumentation-type }})
    strategy:
      fail-fast: false
      matrix:
        # FIXME: (enowell) Both .NET and Go Sample Apps want to Soak Test
        # the same collector-only lambda layer. We count on Soaking Tests to
        # test whether a layer is ready for release. However, the current
        # workflow can only test one Sample App per Lambda Layer. We should
        # create a separate workflow to soak-test Layers with multiple
        # soak tests.
        language: [ go, nodejs, python ]
        sample-app: [ aws-sdk ]
        instrumentation-type: [ wrapper ]
        soak_config: [ '-c 90 -m 70' ]
        include:
          - language: java
            sample-app: aws-sdk
            instrumentation-type: wrapper
            soak_config: '-c 200 -m 90'
          - language: java
            sample-app: aws-sdk
            instrumentation-type: agent
            soak_config: '-c 200 -m 90'
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: actions/setup-go@v2
        with:
          go-version: '^1.16'
      - uses: actions/setup-java@v2
        if: ${{ matrix.language == 'java' }}
        with:
          distribution: adopt
          java-version: '11'
      - name: Cache (Java)
        uses: actions/cache@v2
        if: ${{ matrix.language == 'java' }}
        with:
          path: |
            ~/go/pkg/mod
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - uses: actions/setup-node@v2
        if: ${{ matrix.language == 'nodejs' }}
        with:
          node-version: '14'
      - name: Cache (NodeJS)
        uses: actions/cache@v2
        if: ${{ matrix.language == 'nodejs' }}
        with:
          path: |
            ~/go/pkg/mod
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package.json') }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - uses: actions/setup-python@v2
        if: ${{ matrix.language == 'python' }}
        with:
          python-version: '3.x'
      - name: Cache (Python)
        uses: actions/cache@v2
        if: ${{ matrix.language == 'python' }}
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - uses: actions/setup-dotnet@v1
        if: ${{ matrix.language == 'dotnet' }}
        with:
          dotnet-version: '3.1.x'
      # Default session duration is 6 hours.
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_ARN }}
          mask-aws-account-id: false
          aws-region: us-east-1
      - name: Patch ADOT
        run: ./patch-upstream.sh
      # Login to ECR since may be needed for Python build image.
      - name: Login to Public ECR
        uses: docker/login-action@v1
        with:
          registry: public.ecr.aws
      - name: Build layers / functions
        run: ./build.sh
        working-directory: ${{ matrix.language }}
      - name: Get terraform directory
        run: |
          echo TERRAFORM_DIRECTORY=${{ matrix.language }}/integration-tests/${{ matrix.sample-app }}/${{ matrix.instrumentation-type }} |
          tee --append $GITHUB_ENV
      - uses: hashicorp/setup-terraform@v1
      - name: Initialize terraform
        run: terraform init
        working-directory: ${{ env.TERRAFORM_DIRECTORY }}
      - name: Apply terraform
        run: terraform apply -auto-approve
        working-directory: ${{ env.TERRAFORM_DIRECTORY }}
        env:
          TF_VAR_sdk_layer_name: aws-otel-lambda-${{ matrix.language }}-${{ matrix.sample-app }}-${{ matrix.instrumentation-type }}-${{ github.sha }}
          TF_VAR_collector_layer_name: aws-otel-${{ matrix.language }}-${{ matrix.sample-app }}-${{ matrix.instrumentation-type }}-${{ github.sha }}
          TF_VAR_function_name: hello-lambda-${{ matrix.language }}-${{ matrix.sample-app }}-${{ matrix.instrumentation-type }}-${{ github.run_id }}
      - name: Extract endpoint
        id: extract-endpoint
        run: terraform output -raw api-gateway-url
        working-directory: ${{ env.TERRAFORM_DIRECTORY }}
      - name: Extract AMP endpoint
        if: ${{ matrix.language == 'java' && matrix.sample-app == 'aws-sdk' && matrix.instrumentation-type == 'agent' }}
        id: extract-amp-endpoint
        run: terraform output -raw amp_endpoint
        working-directory: ${{ env.TERRAFORM_DIRECTORY }}
      - name: Extract SDK layer arn
        id: extract-sdk-layer-arn
        if: ${{ matrix.language != 'dotnet' && matrix.language != 'go' }}
        run: terraform output -raw sdk-layer-arn
        working-directory: ${{ env.TERRAFORM_DIRECTORY }}
      # Tests/release for .NET manual instrumentation need collector layer arn
      - name: Extract Collector layer arn
        id: extract-collector-layer-arn
        if: ${{ matrix.language == 'dotnet' || matrix.language == 'go' }}
        run: terraform output -raw collector-layer-arn
        working-directory: ${{ env.TERRAFORM_DIRECTORY }}
      - name: Output SDK layer annotations
        if: ${{ matrix.language != 'dotnet' && matrix.language != 'go' }}
        run: |
          echo "::warning::Function: hello-lambda-${{ matrix.language }}-${{ github.run_id }}-${{ matrix.name }}"
          echo "::warning::SDK Layer ARN: ${{ steps.extract-sdk-layer-arn.outputs.stdout }}"
      - name: Output Collector layer annotations
        if: ${{ matrix.layer_kind == 'collector' }}
        run: |
          echo "::warning::Function: hello-lambda-${{ matrix.language }}-${{ github.run_id }}-${{ matrix.name }}"
          echo "::warning::Collector Layer ARN: ${{ steps.extract-collector-layer-arn.outputs.stdout }}"
      - name: Send request to endpoint
        run: curl -sS ${{ steps.extract-endpoint.outputs.stdout }}
      - name: Checkout test framework
        uses: actions/checkout@v2
        with:
          repository: aws-observability/aws-otel-test-framework
          path: test-framework
      - name: validate trace sample
        run: |
          cp adot/utils/expected-templates/${{ matrix.language }}-${{ matrix.sample-app }}-${{ matrix.instrumentation-type }}.json \
             test-framework/validator/src/main/resources/expected-data-template/lambdaExpectedTrace.mustache
          cd test-framework
          ./gradlew :validator:run --args="-c default-lambda-validation.yml --endpoint ${{ steps.extract-endpoint.outputs.stdout }} --region $AWS_REGION"
      - name: validate java agent metric sample
        if: ${{ matrix.language == 'java' && matrix.sample-app == 'aws-sdk' && matrix.instrumentation-type == 'agent' }}
        run: |
          cp adot/utils/expected-templates/${{ matrix.language }}-${{ matrix.sample-app }}-${{ matrix.instrumentation-type }}-metric.json \
             test-framework/validator/src/main/resources/expected-data-template/ampExpectedMetric.mustache
          cd test-framework
          ./gradlew :validator:run --args="-c prometheus-static-metric-validation.yml --cortex-instance-endpoint ${{ steps.extract-amp-endpoint.outputs.stdout }} --region $AWS_REGION"
      - name: Run soak test
        run: |
          docker run --rm -e AWS_DEFAULT_REGION -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_SESSION_TOKEN \
            public.ecr.aws/aws-otel-test/lambda-soak:latest -n hello-lambda-${{ matrix.language }}-${{ matrix.sample-app }}-${{ matrix.instrumentation-type }}-${{ github.run_id }} \
            -e ${{ steps.extract-endpoint.outputs.stdout }} ${{ github.event.inputs.soak_config }} ${{ matrix.soak_config }}
      - name: Remove sdk layers from terraform management to prevent deletion.
        if: ${{ matrix.layer_kind != 'collector' }}
        run:  terraform state rm module.test.aws_lambda_layer_version.sdk_layer
        working-directory: ${{ env.TERRAFORM_DIRECTORY }}
      - name: Remove collector layers from terraform management to prevent deletion.
        if: ${{ matrix.layer_kind == 'collector' }}
        run: terraform state rm module.test.aws_lambda_layer_version.collector_layer
        working-directory: ${{ env.TERRAFORM_DIRECTORY }}
      - name: Destroy terraform
        if: always()
        run: terraform destroy -auto-approve
        working-directory: ${{ env.TERRAFORM_DIRECTORY }}
