name: soaking

on:
  workflow_dispatch:
    inputs:
      runtime:
        description: 'soaking'
        required: false
        default: 'Python3.8'
      args:
        description: 'soaking test args'
        required: true
        default: '600 5'
  schedule:
    - cron: '0 10 * * *' # every day at 10 am UTC: pst 2am

jobs:
  soaking:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ${{matrix.region}}
      WORK_DIR: "sample-apps/python-lambda"
      ACCOUNT_ID: ${{ secrets.ACCOUNT_ID }}
      ACCOUNT_ID_2: ${{ secrets.ACCOUNT_ID_2 }}
      STACK: soaking-aot-py38-${{ github.run_id }}
    
    strategy:
      matrix:
        region: [us-west-2]

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          mask-aws-account-id: true
          aws-region: ${{matrix.region}}
          
      - name: init
        working-directory: ${{ env.WORK_DIR }}
        run: |
          echo $AWS_REGION
          echo $STACK
          chmod -R +x tools
          cp tools/* .
      
      - name: show git SHA
        if: ${{ success() }}
        run: |
          echo ${{ github.sha }} 
      
      - name: Cache build
        uses: actions/cache@v2
        id: cache-build
        with:
          path: sample-apps/python-lambda/.aws-sam
          key: py38-build-${{ github.sha }}
      
      - name: build
        working-directory: ${{ env.WORK_DIR }}
        if: steps.cache-build.outputs.cache-hit != 'true'
        run: |
          chmod +x run.sh
          ./run.sh -b
      
      - name: deploy sample
        working-directory: ${{ env.WORK_DIR }}
        if: ${{ success() }}
        run: |
          ./run.sh -d
          
      - name: invoke Lambda
        working-directory: ${{ env.WORK_DIR }}
        if: ${{ success() }}
        run: |
          ./run.sh -n
          
      - name: sample layer arn
        working-directory: ${{ env.WORK_DIR }}
        if: ${{ success() }}
        run: |
          ./run.sh -l

      # smoking test
      - name: get endpoint
        working-directory: ${{ env.WORK_DIR }}
        if: ${{ success() }}
        run: |
          ./distribute.sh -n 1 -i 0
          ./distribute.sh -c > ../../endpoint_file
          cd ../..
          cat endpoint_file

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        if: ${{ success() }}
        with:
          java-version: 1.8

      - name: Checkout test framework
        uses: actions/checkout@v2
        if: ${{ success() }}
        with:
          repository: aws-observability/aws-otel-test-framework
          path: test-framework

      - name: run integration test 1
        if: ${{ success() }}
        run: |
          endpoint=$(cat endpoint_file)
          cd test-framework
          ./gradlew :validator:run  --args="-c default-lambda-validation.yml --endpoint $endpoint --region $AWS_REGION"

      - name: turn on Lambda Insight
        working-directory: ${{ env.WORK_DIR }}
        if: ${{ success() }}
        run: |
          ./updateFunction.sh -a "arn:aws:lambda:us-west-2:580247275435:layer:LambdaInsightsExtension:10"
          sleep 30

      - name: manually soaking test
        working-directory: ${{ env.WORK_DIR }}
        if: ${{ success() && github.event_name == 'workflow_dispatch' }}
        run: |
          pip install boto3
          functionName=$(./distribute.sh -f)
          python3 soaking.py $functionName ${{ github.event.inputs.args }}
          echo "Soaking test done."
      
      - name: nightly soaking test
        working-directory: ${{ env.WORK_DIR }}
        if: ${{ success() && github.event_name != 'workflow_dispatch' }}
        run: |
          pip install boto3
          functionName=$(./distribute.sh -f)
          python3 soaking.py $functionName 18000 5
          echo "Soaking test done." 
      
      - name: run integration test 2
        if: ${{ success() }}
        run: |
          endpoint=$(cat endpoint_file)
          cd test-framework
          ./gradlew :validator:run  --args="-c default-lambda-validation.yml --endpoint $endpoint --region $AWS_REGION"

      - name: clean
        working-directory: ${{ env.WORK_DIR }}
        if: ${{ success() }}
        run: |
          aws cloudformation delete-stack --stack-name $STACK
          aws cloudformation wait stack-delete-complete --stack-name $STACK
