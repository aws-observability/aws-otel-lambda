name: Canary (published artifacts) build

on:
  schedule:
    - cron: '25 */8 * * *' # every 8 hours
  workflow_dispatch:

jobs:
  canary-test:
    runs-on: ubuntu-20.04
    name: Canary Test - ${{ matrix.aws_region }} - ${{ matrix.name }}
    strategy:
      fail-fast: false
      matrix:
        aws_region:  [ "us-east-1", "us-east-2", "us-west-1", "us-west-2", "ap-south-1", "ap-northeast-2", "ap-southeast-1", "ap-southeast-2", "ap-northeast-1", "ca-central-1", "eu-central-1", "eu-west-1", "eu-west-2", "eu-west-3", "eu-north-1", "sa-east-1"]
        # We need to define the raw parameters to the matrix here but will customize each
        # below.
        name:
          - java-awssdk-agent
          - java-awssdk-wrapper
          - java-okhttp-wrapper
          - nodejs-awssdk
          - python38
          - dotnet-awssdk-wrapper
        include:
          - name: java-awssdk-agent
            language: java
            build_directory: java
            build_command: ./build.sh
            terraform_directory: sample-apps/java-agent-aws-sdk-terraform
            expected_template: adot/utils/expected-templates/java-awssdk-agent.json
          - name: java-awssdk-wrapper
            language: java
            build_directory: java
            build_command: ./build.sh
            terraform_directory: sample-apps/java-wrapper-aws-sdk-terraform
            expected_template: adot/utils/expected-templates/java-awssdk-wrapper.json
          - name: java-okhttp-wrapper
            language: java
            build_directory: java
            build_command: ./build.sh
            terraform_directory: sample-apps/java-wrapper-okhttp-terraform
            expected_template: adot/utils/expected-templates/java-okhttp-wrapper.json
          - name: nodejs-awssdk
            language: nodejs
            build_directory: opentelemetry-lambda/nodejs
            build_command: npm install
            terraform_directory: sample-apps/nodejs-aws-sdk-terraform
            expected_template: adot/utils/expected-templates/nodejs-awssdk.json
          - name: python38
            language: python
            build_directory: opentelemetry-lambda/python
            build_command: |
              cd sample-apps
              ./build.sh
            terraform_directory: sample-apps/python-aws-sdk-aiohttp-terraform
            expected_template: adot/utils/expected-templates/python.json
          - name: dotnet-awssdk-wrapper
            language: dotnet
            build_directory: dotnet
            build_command: ./build.sh
            terraform_directory: sample-apps/dotnet-wrapper-aws-sdk-terraform
            expected_template: adot/utils/expected-templates/dotnet-awssdk-wrapper.json
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: actions/setup-java@v2
        if: ${{ matrix.language == 'java' }}
        with:
          distribution: adopt
          java-version: '11'
      - name: Cache (Java)
        uses: actions/cache@v2
        if: ${{ matrix.language == 'java' }}
        with:
          path: |
            ~/go/pkg/mod
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - uses: actions/setup-node@v2
        if: ${{ matrix.language == 'nodejs' }}
        with:
          node-version: '14'
      - name: Cache (NodeJS)
        uses: actions/cache@v2
        if: ${{ matrix.language == 'nodejs' }}
        with:
          path: |
            ~/go/pkg/mod
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package.json') }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - uses: actions/setup-python@v2
        if: ${{ matrix.language == 'python' }}
        with:
          python-version: '3.x'
      - name: Cache (Python)
        uses: actions/cache@v2
        if: ${{ matrix.language == 'python' }}
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - uses: actions/setup-dotnet@v1
        if: ${{ matrix.language == 'dotnet' }}
        with:
          dotnet-version: '3.1.x'
      - name: Patch ADOT
        run: ./patch-upstream.sh
      - name: Build functions
        run: ${{ matrix.build_command }}
        working-directory: ${{ matrix.build_directory }}
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_ARN }}
          role-duration-seconds: 1200
          aws-region: ${{ matrix.aws_region }}
      - uses: hashicorp/setup-terraform@v1
      - name: Initialize terraform
        run: terraform init
        working-directory: ${{ matrix.terraform_directory }}
      - name: Apply terraform
        run: terraform apply -auto-approve
        working-directory: ${{ matrix.terraform_directory }}
        env:
          TF_VAR_function_name: hello-lambda-${{ matrix.name }}-${{ github.run_id }}-${{ matrix.aws_region }}
      - name: Extract endpoint
        id: extract-endpoint
        run: terraform output -raw api-gateway-url
        working-directory: ${{ matrix.terraform_directory }}
      - name: Send request to endpoint
        run: curl -sS ${{ steps.extract-endpoint.outputs.stdout }}
      - name: Checkout test framework
        uses: actions/checkout@v2
        with:
          repository: aws-observability/aws-otel-test-framework
          path: test-framework
      - name: validate sample
        run: |
          cp ${{ matrix.expected_template }} test-framework/validator/src/main/resources/expected-data-template/lambdaExpectedTrace.mustache
          cd test-framework
          ./gradlew :validator:run --args="-c default-lambda-validation.yml --endpoint ${{ steps.extract-endpoint.outputs.stdout }} --region $AWS_REGION"
      - name: Destroy terraform
        if: always()
        run: terraform destroy -auto-approve
        working-directory: ${{ matrix.terraform_directory }}
