name: CI

on:
  push:
    branches: [ main ]

jobs:
  tox:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python: [3.8]
    
    steps:
      - uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - name: Install Tox and any other packages
        run: pip install tox
      - name: Run tox
        run: |
          echo tox...
          cd sample-apps/python-lambda && tox

  build:
    needs: tox
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ${{matrix.region}}
      WORK_DIR: "sample-apps/python-lambda"
      ACCOUNT_ID: ${{ secrets.ACCOUNT_ID }}
      ACCOUNT_ID_2: ${{ secrets.ACCOUNT_ID_2 }}
      STACK: ci-aot-py38-${{ github.run_id }}
    
    strategy:
      matrix:
        region: [us-west-1]

    steps:
      - uses: actions/checkout@v2
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          mask-aws-account-id: false
          aws-region: ${{matrix.region}}
          
      - name: init
        working-directory: ${{ env.WORK_DIR }}
        run: |
          echo $AWS_REGION
          echo $STACK
          chmod -R +x tools
          cp tools/* .

      - name: load test asset # TODO: create a test layer.
        run: |
          cd extensions/aoc-extension
          cp tst/resources/* .

      - name: Cache build
        uses: actions/cache@v2
        id: cache-build
        with:
          path: ${{ env.WORK_DIR }}/.aws-sam
          key: py38-build-${{ github.sha }}
      
      - name: build sample
        working-directory: ${{ env.WORK_DIR }}
        if: steps.cache-build.outputs.cache-hit != 'true'
        run: |
          chmod +x run.sh
          ./run.sh -b  
      
      - name: deploy sample
        working-directory: ${{ env.WORK_DIR }}
        if: ${{ success() }}
        run: |
          ./run.sh -d
          
      - name: invoke Lambda
        working-directory: ${{ env.WORK_DIR }}
        if: ${{ success() }}
        run: |
          ./run.sh -n
          
      - name: sample layer arn
        working-directory: ${{ env.WORK_DIR }}
        if: ${{ success() }}
        run: |
          ./run.sh -l

      # integratin test
      - name: get endpoint
        working-directory: ${{ env.WORK_DIR }}
        if: ${{ success() }}
        run: |
          ./distribute.sh -c > ../../endpoint_file
          cd ../..
          cat endpoint_file

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        if: ${{ success() }}
        with:
          java-version: 1.8

      - name: Checkout test framework
        uses: actions/checkout@v2
        if: ${{ success() }}
        with:
          repository: aws-observability/aws-otel-test-framework
          path: test-framework

      - name: run integration test
        if: ${{ success() }}
        run: |
          endpoint=$(cat endpoint_file)
          cd test-framework
          ./gradlew :validator:run  --args="-c default-lambda-validation.yml --endpoint $endpoint --region $AWS_REGION"

      - name: update aoc config to grpc exporter # remove from CD
        working-directory: ${{ env.WORK_DIR }}
        if: ${{ success() }}
        run: |
          ./updateFunction.sh -e "Variables={AOC_CONFIG=/opt/aoc/config-grpc.yaml,AWS_LAMBDA_EXEC_WRAPPER=/opt/python/aot-instrument}"
          ./distribute.sh -n 1 -i 0

      - name: run integration test for grpc exporter
        if: ${{ success() }}
        run: |
          ./distribute.sh -n 6 -i 10 &
          endpoint=$(cat endpoint_file)
          cd test-framework
          ./gradlew :validator:run  --args="-c default-lambda-validation.yml --endpoint $endpoint --region $AWS_REGION"

      # clean
      - name: clean
        working-directory: ${{ env.WORK_DIR }}
        run: |
          ./distribute.sh -e

  # move to CD
  deploy-global:
    needs: build
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ${{matrix.region}}
      WORK_DIR: "sample-apps/python-lambda"
      ACCOUNT_ID: ${{ secrets.ACCOUNT_ID }}
      ACCOUNT_ID_2: ${{ secrets.ACCOUNT_ID_2 }}
      STACK: cd-aot-py38-${{ github.run_id }}
    
    strategy:
      matrix:
        region: [us-west-2, us-east-2, eu-west-1, eu-west-2]

    steps:
      - uses: actions/checkout@v2
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_2 }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_2 }}
          mask-aws-account-id: false
          aws-region: ${{matrix.region}}
          
      - name: init
        working-directory: ${{ env.WORK_DIR }}
        run: |
          echo $AWS_REGION
          echo $STACK
          chmod -R +x tools
          cp tools/* .

      - name: Cache build
        uses: actions/cache@v2
        with:
          path: ${{ env.WORK_DIR }}/.aws-sam
          key: py38-build-${{ github.sha }}

      - name: deploy sample
        working-directory: ${{ env.WORK_DIR }}
        if: ${{ success() }}
        run: |
          ./run.sh -d
      
      # smoking test
      - name: get endpoint
        working-directory: ${{ env.WORK_DIR }}
        if: ${{ success() }}
        run: |
          ./distribute.sh -n 1 -i 0
          ./distribute.sh -c > ../../endpoint_file
          cd ../..
          cat endpoint_file

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        if: ${{ success() }}
        with:
          java-version: 1.8

      - name: Checkout test framework
        uses: actions/checkout@v2
        if: ${{ success() }}
        with:
          repository: aws-observability/aws-otel-test-framework
          path: test-framework

      - name: run integration test
        if: ${{ success() }}
        run: |
          endpoint=$(cat endpoint_file)
          cd test-framework
          ./gradlew :validator:run  --args="-c default-lambda-validation.yml --endpoint $endpoint --region $AWS_REGION"
      
      - name: get layerARN
        if: ${{ success() }}
        run: |
          mkdir layerARNsPy38
          cd $WORK_DIR
          ./distribute.sh -l
          ./distribute.sh -l > ../../layerARNsPy38/$AWS_REGION
          cat ../../layerARNsPy38/$AWS_REGION
      
      - name: upload layer arn artifact
        if: ${{ success() }}
        uses: actions/upload-artifact@v2
        with:
          name: layerARNsPy38
          path: layerARNsPy38/${{matrix.region}}
          retention-days: 1

      - name: clean
        working-directory: ${{ env.WORK_DIR }}
        run: |
          ./distribute.sh -e

  pre-release:
    needs: deploy-global
    runs-on: ubuntu-latest

    steps:
      - name: download layerARNs
        uses: actions/download-artifact@v2
        with:
          name: layerARNsPy38
          path: layerARNsPy38

      - name: Cache ARNs
        uses: actions/cache@v2
        with:
          path: layerARNsPy38
          key: layerARNsPy38-${{ github.sha }}

      - name: show layerARNs
        run: |
          for file in ./layerARNsPy38/*
          do
          echo $file
          cat $file
          done

  public-layers:
    needs: pre-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: init
        run: |
          chmod -R +x sample-apps/python-lambda/tools
          cp sample-apps/python-lambda/tools/* .
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_2 }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_2 }}
          mask-aws-account-id: false
          aws-region: 'us-east-1'

      - name: Cache ARNs
        uses: actions/cache@v2
        with:
          path: layerARNsPy38
          key: layerARNsPy38-${{ github.sha }}

      - name: show layerARNs
        run: |
          for file in ./layerARNsPy38/*
          do
          echo $file
          cat $file
          done

      - name: public layers
        run: |
          ./publicLayers.sh

  release-to-github:
    runs-on: ubuntu-latest
    needs: [public-layers]
    steps:
      - uses: actions/checkout@v2

      - name: init
        run: |
          chmod -R +x sample-apps/python-lambda/tools
          cp sample-apps/python-lambda/tools/* .
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_2 }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_2 }}
          mask-aws-account-id: false
          aws-region: 'us-east-1'

      - name: Cache ARNs
        uses: actions/cache@v2
        with:
          path: layerARNsPy38
          key: layerARNsPy38-${{ github.sha }}

      - name: show layerARNs
        run: |
          for file in ./layerARNsPy38/*
          do
          echo $file
          cat $file
          done
     
      - name: Generate release-note
        run: |
          echo "# AOT Lambda Layers" > release-note
          echo "## Runtime Python3.8" >> release-note
          echo "| Region | Layer ARN |" >> release-note
          echo "|  ----  | ----  |" >> release-note
          cd layerARNsPy38
          for file in *
          do
          read arn < $file
          echo "| " $file " | " $arn " |" >> ../release-note
          done
          cd ..
          cat release-note
        
      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body_path: release-note
          draft: true
          prerelease: true
