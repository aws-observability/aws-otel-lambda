name: Main Build

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  integration-test:
    runs-on: ubuntu-20.04
    name: Integration Test - (${{ matrix.language }}, ${{ matrix.sample-app }}, ${{ matrix.instrumentation-type }})
    strategy:
      fail-fast: false
      matrix:
        language: [ dotnet, go, java, nodejs, python ]
        sample-app: [ aws-sdk ]
        instrumentation-type: [ wrapper ]
        include:
          - language: java
            sample-app: aws-sdk
            instrumentation-type: agent
          - language: java
            sample-app: okhttp
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: actions/setup-go@v2
        with:
          go-version: '^1.16'
      - uses: actions/setup-java@v2
        if: ${{ matrix.language == 'java' }}
        with:
          distribution: adopt
          java-version: '11'
      - name: Cache (Java)
        uses: actions/cache@v2
        if: ${{ matrix.language == 'java' }}
        with:
          path: |
            ~/go/pkg/mod
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - uses: actions/setup-node@v2
        if: ${{ matrix.language == 'nodejs' }}
        with:
          node-version: '14'
      - name: Cache (NodeJS)
        uses: actions/cache@v2
        if: ${{ matrix.language == 'nodejs' }}
        with:
          path: |
            ~/go/pkg/mod
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package.json') }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - uses: actions/setup-python@v2
        if: ${{ matrix.language == 'python' }}
        with:
          python-version: '3.x'
      - name: Cache (Python)
        uses: actions/cache@v2
        if: ${{ matrix.language == 'python' }}
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - uses: actions/setup-dotnet@v1
        if: ${{ matrix.language == 'dotnet' }}
        with:
          dotnet-version: '3.1.x'
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_ARN }}
          role-duration-seconds: 1200
          aws-region: us-east-1
      - name: Patch ADOT
        run: ./patch-upstream.sh
      # Login to ECR since may be needed for Python build image.
      - name: Login to Public ECR
        uses: docker/login-action@v1
        with:
          registry: public.ecr.aws
      - name: Build layers / functions
        run: ./build.sh
        working-directory: ${{ matrix.language }}
      - name: Get terraform directory
        run: |
          echo TERRAFORM_DIRECTORY=integration-tests/${{ matrix.language }}/${{ matrix.sample-app }}/${{ matrix.integration-type }} |
          tee --append $GITHUB_ENV
      - uses: hashicorp/setup-terraform@v1
      - name: Validate terraform and get outputs
        id: terraform-outputs
        working-directory: .github/scripts
        run: |
          TERRAFORM_DIRECTORY=${{ env.TERRAFORM_DIRECTORY }} \
          TEST_CASE_UNIQUE_SUFFIX=${{ matrix.language }}-${{ github.run_id }}-${{ matrix.sample-app }}-${{ matrix.instrumentation-type }} \
          ./validate_terraform_and_print_outputs.sh | tee --append $GITHUB_ENV;

          echo "::set-output name=amp-endpoint::${{ env.AMP_ENDPOINT }}";
          echo "::set-output name=api-gateway-url::${{ env.API_GATEWARY_URL }}";
          echo "::set-output name=sdk-layer-arn::${{ env.SDK_LAYER_ARN }}";
      - name: Checkout test framework
        uses: actions/checkout@v2
        with:
          repository: aws-observability/aws-otel-test-framework
          path: test-framework
      - name: validate trace sample
        run: |
          cp adot/utils/expected-templates/${{ matrix.language }}-${{ matrix.sample-app }}-${{ matrix.instrumentation-type }}.json \
             test-framework/validator/src/main/resources/expected-data-template/lambdaExpectedTrace.mustache
          cd test-framework
          ./gradlew :validator:run --args="
            -c default-lambda-validation.yml
            --endpoint ${{ steps.terraform-outputs.amp-endpoint }}
            --region $AWS_REGION
          "
      - name: validate java agent metric sample
        if: ${{ matrix.language == 'java' && matrix.sample-app == 'aws-sdk' && matrix.instrumentation-type == 'agent' }}
        run: |
          cp adot/utils/expected-templates/${{ matrix.language }}-${{ matrix.sample-app }}-${{ matrix.instrumentation-type }}-metric.json \
             test-framework/validator/src/main/resources/expected-data-template/ampExpectedMetric.mustache
          cd test-framework
          ./gradlew :validator:run --args="
            -c prometheus-static-metric-validation.yml
            --cortex-instance-endpoint ${{ steps.terraform-outputs.amp-endpoint }}
            --region $AWS_REGION
          "
      - name: Destroy terraform
        if: always()
        run: terraform destroy -auto-approve
        working-directory: ${{ env.TERRAFORM_DIRECTORY }}
