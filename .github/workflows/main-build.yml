name: Main Build

on:
  push:
    branches: 
      - main 
      - release/*
  workflow_dispatch:

jobs:
  integration-test:
    runs-on: ubuntu-20.04
    name: Integration - (${{ matrix.language }}, ${{ matrix.sample-app }}, ${{ matrix.instrumentation-type }}, ${{ matrix.architecture }})
    strategy:
      fail-fast: false
      matrix:
        architecture: [ amd64, arm64 ]
        language: [ dotnet, go, java, nodejs, python ]
        sample-app: [ aws-sdk ]
        instrumentation-type: [ wrapper ]
        include:
          - language: java
            sample-app: aws-sdk
            instrumentation-type: agent
            architecture: amd64
          - language: java
            sample-app: aws-sdk
            instrumentation-type: agent
            architecture: arm64
          - language: java
            sample-app: okhttp
            instrumentation-type: wrapper
            architecture: amd64
          - language: java
            sample-app: okhttp
            instrumentation-type: wrapper
            architecture: arm64
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - uses: actions/setup-go@v3
        with:
          go-version: '^1.19.1'
      - uses: actions/setup-java@v2
        if: ${{ matrix.language == 'java' }}
        with:
          distribution: adopt
          java-version: '11'
      - name: Cache (Java)
        uses: actions/cache@v3
        if: ${{ matrix.language == 'java' }}
        with:
          path: |
            ~/go/pkg/mod
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - uses: actions/setup-node@v3
        if: ${{ matrix.language == 'nodejs' }}
        with:
          node-version: '14'
      - name: Cache (NodeJS)
        uses: actions/cache@v3
        if: ${{ matrix.language == 'nodejs' }}
        with:
          path: |
            ~/go/pkg/mod
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package.json') }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - uses: actions/setup-python@v4
        if: ${{ matrix.language == 'python' }}
        with:
          python-version: '3.x'
      - name: Cache (Python)
        uses: actions/cache@v3
        if: ${{ matrix.language == 'python' }}
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - uses: actions/setup-dotnet@v2
        if: ${{ matrix.language == 'dotnet' }}
        with:
          dotnet-version: '3.1.x'
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_ARN }}
          role-duration-seconds: 1200
          aws-region: us-east-1
      - name: Patch ADOT
        run: ./patch-upstream.sh
      # Login to ECR since may be needed for Python build image.
      - name: Login to Public ECR
        uses: docker/login-action@v1
        with:
          registry: public.ecr.aws
      - name: Build layers / functions
        run: GOARCH=${{ matrix.architecture }} ./build.sh
        working-directory: ${{ matrix.language }}
      - name: Get Lambda Layer amd64 architecture value
        if: ${{ matrix.architecture == 'amd64' }}
        run: echo LAMBDA_FUNCTION_ARCH=x86_64 | tee --append $GITHUB_ENV
      - name: Get Lambda Layer arm64 architecture value
        if: ${{ matrix.architecture == 'arm64' }}
        run: echo LAMBDA_FUNCTION_ARCH=arm64 | tee --append $GITHUB_ENV
      - name: Get terraform directory
        run: |
          echo TERRAFORM_DIRECTORY=${{ matrix.language }}/integration-tests/${{ matrix.sample-app }}/${{ matrix.instrumentation-type }} |
          tee --append $GITHUB_ENV
      - uses: hashicorp/setup-terraform@v2
      - name: Initialize terraform
        run: terraform init
        working-directory: ${{ env.TERRAFORM_DIRECTORY }}
      - name: Get terraform Lambda function name
        run: |
          echo TERRAFORM_LAMBDA_FUNCTION_NAME=lambda-${{ matrix.language }}-${{ matrix.sample-app }}-${{ matrix.instrumentation-type }}-${{ matrix.architecture }}-${{ github.run_id }} |
          tee --append $GITHUB_ENV
      - name: Apply terraform
        run: terraform apply -auto-approve
        working-directory: ${{ env.TERRAFORM_DIRECTORY }}
        env:
          TF_VAR_sdk_layer_name: opentelemetry-${{ matrix.language }}-${{ matrix.sample-app }}-${{ matrix.instrumentation-type }}-${{ matrix.architecture }}-${{ github.run_id }}
          TF_VAR_function_name: ${{ env.TERRAFORM_LAMBDA_FUNCTION_NAME }}
          TF_VAR_architecture: ${{ env.LAMBDA_FUNCTION_ARCH }}
      - name: Extract endpoint
        id: extract-endpoint
        run: terraform output -raw api-gateway-url
        working-directory: ${{ env.TERRAFORM_DIRECTORY }}
      - name: Extract AMP endpoint
        id: extract-amp-endpoint
        if: ${{ matrix.language == 'java' && matrix.sample-app == 'aws-sdk' && matrix.instrumentation-type == 'agent' }}
        run: terraform output -raw amp_endpoint
        working-directory: ${{ env.TERRAFORM_DIRECTORY }}
      - name: Extract SDK layer arn
        id: extract-sdk-layer-arn
        if: ${{ matrix.language != 'dotnet' && matrix.language != 'go' }}
        run: terraform output -raw sdk-layer-arn
        working-directory: ${{ env.TERRAFORM_DIRECTORY }}
      - name: Output annotations
        if: ${{ matrix.language != 'dotnet' && matrix.language != 'go' }}
        run: |
          echo "::warning::Function: ${{ env.TERRAFORM_LAMBDA_FUNCTION_NAME }}"
          echo "::warning::SDK Layer ARN: ${{ steps.extract-sdk-layer-arn.outputs.stdout }}"
      - name: Send request to endpoint
        run: curl -sS ${{ steps.extract-endpoint.outputs.stdout }}
      - name: Checkout test framework
        uses: actions/checkout@v3
        with:
          repository: aws-observability/aws-otel-test-framework
          path: test-framework
      - name: validate trace sample
        run: |
          cp adot/utils/expected-templates/${{ matrix.language }}-${{ matrix.sample-app }}-${{ matrix.instrumentation-type }}.json \
             test-framework/validator/src/main/resources/expected-data-template/lambdaExpectedTrace.mustache
          cd test-framework
          ./gradlew :validator:run --args="-c default-lambda-validation.yml --endpoint ${{ steps.extract-endpoint.outputs.stdout }} --region $AWS_REGION"
      - name: validate java agent metric sample
        if: ${{ matrix.language == 'java' && matrix.sample-app == 'aws-sdk' && matrix.instrumentation-type == 'agent' }}
        run: |
          cp adot/utils/expected-templates/${{ matrix.language }}-${{ matrix.sample-app }}-${{ matrix.instrumentation-type }}-metric.json \
             test-framework/validator/src/main/resources/expected-data-template/ampExpectedMetric.mustache
          cd test-framework
          ./gradlew :validator:run --args="-c prometheus-static-metric-validation.yml --cortex-instance-endpoint ${{ steps.extract-amp-endpoint.outputs.stdout }} --region $AWS_REGION"
      - name: Destroy terraform
        if: always()
        run: terraform destroy -auto-approve
        working-directory: ${{ env.TERRAFORM_DIRECTORY }}
